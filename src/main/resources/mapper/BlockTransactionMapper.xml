<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lte.dao.mapper.BlockTransactionMapper" >
  <resultMap id="BaseResultMap" type="com.lte.dao.entity.BlockTransaction" >
    <id column="trx_id" property="trxId" jdbcType="VARCHAR" />
    <result column="block_num" property="blockNum" jdbcType="BIGINT" />
    <result column="from_address" property="fromAddress" jdbcType="VARCHAR" />
    <result column="to_address" property="toAddress" jdbcType="VARCHAR" />
    <result column="hash" property="hash" jdbcType="VARCHAR" />
    <result column="block_hash" property="blockHash" jdbcType="VARCHAR" />
    <result column="fee" property="fee" jdbcType="DECIMAL" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="memo" property="memo" jdbcType="VARCHAR" />
    <result column="trx_type" property="trxType" jdbcType="INTEGER" />
    <result column="trx_time" property="trxTime" jdbcType="VARCHAR" />
    <result column="created_at" property="createdAt" jdbcType="VARCHAR" />
    <result column="coinbase" property="coinbase" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    trx_id, block_num, from_address, to_address, hash, block_hash, fee, amount, memo, 
    trx_type, trx_time, created_at,coinbase
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from block_transaction
    where trx_id = #{trxId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from block_transaction
    where trx_id = #{trxId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.lte.dao.entity.BlockTransaction" >
    insert into block_transaction (trx_id, block_num, from_address, 
      to_address, hash, block_hash, 
      fee, amount, memo, 
      trx_type, trx_time, created_at,coinbase
      )
    values (#{trxId,jdbcType=VARCHAR}, #{blockNum,jdbcType=BIGINT}, #{fromAddress,jdbcType=VARCHAR}, 
      #{toAddress,jdbcType=VARCHAR}, #{hash,jdbcType=VARCHAR}, #{blockHash,jdbcType=VARCHAR}, 
      #{fee,jdbcType=DECIMAL}, #{amount,jdbcType=DECIMAL}, #{memo,jdbcType=VARCHAR}, 
      #{trxType,jdbcType=INTEGER}, #{trxTime,jdbcType=VARCHAR}, #{createdAt,jdbcType=VARCHAR}, #{coinbase,jdbcType=VARCHAR}
      )
  </insert>

  <insert id="insertBatch" parameterType="java.util.List">
    insert into block_transaction (trx_id, block_num, from_address,
    to_address, hash, block_hash,
    fee, amount, memo,
    trx_type, trx_time, created_at,coinbase
    )
    values
    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.trxId,jdbcType=VARCHAR}, #{item.blockNum,jdbcType=BIGINT}, #{item.fromAddress,jdbcType=VARCHAR},
      #{item.toAddress,jdbcType=VARCHAR}, #{item.hash,jdbcType=VARCHAR}, #{item.blockHash,jdbcType=VARCHAR},
      #{item.fee,jdbcType=DECIMAL}, #{item.amount,jdbcType=DECIMAL}, #{item.memo,jdbcType=VARCHAR},
      #{item.trxType,jdbcType=INTEGER}, #{item.trxTime,jdbcType=VARCHAR}, #{item.createdAt,jdbcType=VARCHAR}, #{item.coinbase,jdbcType=VARCHAR}
      )
    </foreach>
  </insert>

  <insert id="insertSelective" parameterType="com.lte.dao.entity.BlockTransaction" >
    insert into block_transaction
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="trxId != null" >
        trx_id,
      </if>
      <if test="blockNum != null" >
        block_num,
      </if>
      <if test="fromAddress != null" >
        from_address,
      </if>
      <if test="toAddress != null" >
        to_address,
      </if>
      <if test="hash != null" >
        hash,
      </if>
      <if test="blockHash != null" >
        block_hash,
      </if>
      <if test="fee != null" >
        fee,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="memo != null" >
        memo,
      </if>
      <if test="trxType != null" >
        trx_type,
      </if>
      <if test="trxTime != null" >
        trx_time,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="createdAt != null" >
        coinbase,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="trxId != null" >
        #{trxId,jdbcType=VARCHAR},
      </if>
      <if test="blockNum != null" >
        #{blockNum,jdbcType=BIGINT},
      </if>
      <if test="fromAddress != null" >
        #{fromAddress,jdbcType=VARCHAR},
      </if>
      <if test="toAddress != null" >
        #{toAddress,jdbcType=VARCHAR},
      </if>
      <if test="hash != null" >
        #{hash,jdbcType=VARCHAR},
      </if>
      <if test="blockHash != null" >
        #{blockHash,jdbcType=VARCHAR},
      </if>
      <if test="fee != null" >
        #{fee,jdbcType=DECIMAL},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="memo != null" >
        #{memo,jdbcType=VARCHAR},
      </if>
      <if test="trxType != null" >
        #{trxType,jdbcType=INTEGER},
      </if>
      <if test="trxTime != null" >
        #{trxTime,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=VARCHAR},
      </if>
      <if test="coinbase != null" >
        #{coinbase,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lte.dao.entity.BlockTransaction" >
    update block_transaction
    <set >
      <if test="blockNum != null" >
        block_num = #{blockNum,jdbcType=BIGINT},
      </if>
      <if test="fromAddress != null" >
        from_address = #{fromAddress,jdbcType=VARCHAR},
      </if>
      <if test="toAddress != null" >
        to_address = #{toAddress,jdbcType=VARCHAR},
      </if>
      <if test="hash != null" >
        hash = #{hash,jdbcType=VARCHAR},
      </if>
      <if test="blockHash != null" >
        block_hash = #{blockHash,jdbcType=VARCHAR},
      </if>
      <if test="fee != null" >
        fee = #{fee,jdbcType=DECIMAL},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="memo != null" >
        memo = #{memo,jdbcType=VARCHAR},
      </if>
      <if test="trxType != null" >
        trx_type = #{trxType,jdbcType=INTEGER},
      </if>
      <if test="trxTime != null" >
        trx_time = #{trxTime,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=VARCHAR},
      </if>
      <if test="coinbase != null" >
        coinbase = #{coinbase,jdbcType=VARCHAR},
      </if>
    </set>
    where trx_id = #{trxId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lte.dao.entity.BlockTransaction" >
    update block_transaction
    set block_num = #{blockNum,jdbcType=BIGINT},
      from_address = #{fromAddress,jdbcType=VARCHAR},
      to_address = #{toAddress,jdbcType=VARCHAR},
      hash = #{hash,jdbcType=VARCHAR},
      block_hash = #{blockHash,jdbcType=VARCHAR},
      fee = #{fee,jdbcType=DECIMAL},
      amount = #{amount,jdbcType=DECIMAL},
      memo = #{memo,jdbcType=VARCHAR},
      trx_type = #{trxType,jdbcType=INTEGER},
      trx_time = #{trxTime,jdbcType=VARCHAR},
      coinbase = #{coinbase,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=VARCHAR}
    where trx_id = #{trxId,jdbcType=VARCHAR}
  </update>

  <select id="getNewTransaction" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from block_transaction
    order by trx_time DESC
    limit 10
  </select>

  <select id="selectTransactionByBlockNum" resultMap="BaseResultMap" parameterType="com.lte.dao.entity.BlockTransaction">
    select
    <include refid="Base_Column_List" />
    from block_transaction
    where block_num = #{blockNum,jdbcType=BIGINT}
    order by trx_time desc
    limit #{start,jdbcType=INTEGER},#{end,jdbcType=INTEGER}
  </select>

  <select id="selectTransactionList" resultMap="BaseResultMap" parameterType="com.lte.dao.entity.BlockTransaction">
    select
    <include refid="Base_Column_List" />
    from block_transaction
    where trx_id in
    <foreach collection="trxIdList" index="index" open="(" separator="," close=")" item="id">
      #{id}
    </foreach>
    order by trx_time desc
    limit #{start,jdbcType=INTEGER},#{end,jdbcType=INTEGER}
  </select>

  <select id="selectTrxListByIds" resultMap="BaseResultMap" parameterType="com.lte.dao.entity.BlockTransaction">
    select
    <include refid="Base_Column_List" />
    from block_transaction
    where trx_id in
    <foreach collection="trxIdList" index="index" open="(" separator="," close=")" item="id">
      #{id}
    </foreach>
  </select>
</mapper>